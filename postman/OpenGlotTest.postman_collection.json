{
	"info": {
		"_postman_id": "b4841187-3a7f-4110-a5e5-511394f03ef4",
		"name": "OpenGlotTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26701309"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Cognito signin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var clientId = pm.environment.get(\"client_id\");",
									"var username = pm.environment.get(\"cognito_username\");",
									"var password = pm.environment.get(\"cognito_password\");",
									"pm.sendRequest({",
									"           url: \"https://cognito-idp.us-east-1.amazonaws.com/\",",
									"           method: 'POST',",
									"           header: {",
									"                    'X-Amz-Target':   'AWSCognitoIdentityProviderService.InitiateAuth',",
									"                    'Content-Type': 'application/x-amz-json-1.1'",
									"                   },",
									"            body: {",
									"                   mode: 'raw',",
									"                   raw: JSON.stringify({",
									"                   \"AuthParameters\": {",
									"                   \"USERNAME\": username,",
									"                   \"PASSWORD\": password",
									"                   },",
									"                  \"AuthFlow\": \"USER_PASSWORD_AUTH\",",
									"                  \"ClientId\": clientId",
									"  }),",
									"options: {",
									"raw: {",
									"language: 'json'",
									"}",
									"}",
									"}",
									"}, function (error, response) {",
									"pm.environment.set(\"cognitoAccessToken\", response.json().AuthenticationResult.AccessToken);",
									"pm.environment.set(\"cognitoIdToken\", response.json().AuthenticationResult.IdToken);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "refreshTokenUrl",
									"value": "",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "{{redirect_uri}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "eyJraWQiOiJoZHpcL0FWczJ1Y1RIdVZpOGpoaEdJcmlKeEg4U1VCUm1TUVVXODhcL2VCb1U9IiwiYWxnIjoiUlMyNTYifQ.eyJhdF9oYXNoIjoiMHBQUE43M1R1WFg2OVVpQUR5bVVIQSIsInN1YiI6ImM0Mzg2NDI4LTgwZTEtNzA1OS0xZWYyLTEwNWI3YzQzNTFlYSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tXC91cy1lYXN0LTFfQUtpODQ5VUhyIiwiY29nbml0bzp1c2VybmFtZSI6ImM0Mzg2NDI4LTgwZTEtNzA1OS0xZWYyLTEwNWI3YzQzNTFlYSIsIm9yaWdpbl9qdGkiOiI4NWQ2ZmM4OC03ZWM5LTRkM2UtOWUxYy01OWJhYTQ5YmI3NjQiLCJhdWQiOiIxcWVpOTA4NGdkdW02MzJoZ2drNjg1Nmo0ZiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNzE4ODg2MjM3LCJuYW1lIjoiVGVzdFVzZXIiLCJleHAiOjE3MTg4ODk4MzcsImlhdCI6MTcxODg4NjIzNywianRpIjoiNTY1NGI0MTYtYjgxMS00ZjE0LTlmZWEtMzYxMWVmNjBhNDhkIiwiZW1haWwiOiJ0ZXN0QGV4YW1wbGUuY29tIn0.eTrK2wM17oQQjm2ax59UvJN3kz97WCoBHHPPDXoNRXxuFmr3x4ZxaI4a58iEbLGBOoNUsp4nhz1TBTmgTlIktc7ya8JrLPOBTkwRZJTTCR6Q-y_SZCmbky5X0IMrzN3wdJir24rLdeuQ3S2SJ2sj9B7e-BMpX0eUTn0-6UPaBg47gj0qLpq6vr_yAXNhnqdz6OEs3KPX1UwF03gl4LrVdsUJLgybifIV5WcHZdRQhpoqbwTVV6dlWD6PU8p3GehxDhjeehSN4WklA5ssZto5XsNpxE5R3IA0TdFLnw0Xa4sNiwQFp1X8zhi0YacUAHpZIe5PdTYGj_LhOPKczi7PUw",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "{{client_id}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "useBrowser",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "client_authentication",
									"value": "body",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://openglot02.auth.us-east-1.amazoncognito.com/oauth2/authorize",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "https://openglot02.auth.us-east-1.amazoncognito.com/oauth2/token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://openglot02.auth.us-east-1.amazoncognito.com/oauth2/authorize?response_type=code&client_id={{client_id}}&redirect_uri={{redirect_uri}}",
							"protocol": "https",
							"host": [
								"openglot02",
								"auth",
								"us-east-1",
								"amazoncognito",
								"com"
							],
							"path": [
								"oauth2",
								"authorize"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "{{redirect_uri}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Courses",
			"item": [
				{
					"name": "Get all courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test('Response body contains required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(item) {",
									"            pm.expect(item).to.have.property('id');",
									"            pm.expect(item).to.have.property('title');",
									"            pm.expect(item).to.have.property('languageId');",
									"            pm.expect(item).to.have.property('language');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/Courses",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"Courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"pm.test('Response body contains required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('languageId');",
									"    pm.expect(jsonData).to.have.property('language');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/Courses/1",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"Courses",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test('Response body contains required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(user) {",
									"            pm.expect(user).to.have.property('userId');",
									"            pm.expect(user).to.have.property('username');",
									"            pm.expect(user).to.have.property('email');",
									"            pm.expect(user).to.have.property('nativeLanguage');",
									"            pm.expect(user).to.have.property('targetLanguage');",
									"            pm.expect(user).to.have.property('targetLanguageLevel');",
									"            pm.expect(user).to.have.property('targetLanguage2');",
									"            pm.expect(user).to.have.property('targetLanguageLevel2');",
									"            pm.expect(user).to.have.property('targetLanguage3');",
									"            pm.expect(user).to.have.property('targetLanguageLevel3');",
									"            pm.expect(user).to.have.property('dateOfBirth');",
									"            pm.expect(user).to.have.property('timeZone');",
									"            pm.expect(user).to.have.property('userRoles');",
									"            pm.expect(user).to.have.property('ratings');",
									"            pm.expect(user).to.have.property('progresses');",
									"            pm.expect(user).to.have.property('badges');",
									"            pm.expect(user).to.have.property('notifications');",
									"            pm.expect(user).to.have.property('flashcards');",
									"            pm.expect(user).to.have.property('userGeneratedContents');",
									"            pm.expect(user).to.have.property('subscription');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJraWQiOiIzUWpLSk9yOFRRNVFsUk9CMWNRQmhBbkoxRTUzUzEzVWZyaXNxVnpUcmtJPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIzNDI4MDRmOC01MGQxLTcwNjQtMDc0NC04NWY0ZGQ1ZmI2YWYiLCJjb2duaXRvOmdyb3VwcyI6WyJ1cy1lYXN0LTFfQUtpODQ5VUhyX0dvb2dsZSJdLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9BS2k4NDlVSHIiLCJ2ZXJzaW9uIjoyLCJjbGllbnRfaWQiOiIxcWVpOTA4NGdkdW02MzJoZ2drNjg1Nmo0ZiIsIm9yaWdpbl9qdGkiOiJiNDhiYzBiZC0zNmE5LTQyNmUtOTFkOS05NmYyMWU1Zjg5NDUiLCJ0b2tlbl91c2UiOiJhY2Nlc3MiLCJzY29wZSI6InBob25lIG9wZW5pZCBwcm9maWxlIGVtYWlsIiwiYXV0aF90aW1lIjoxNzE4NDkzMzk4LCJleHAiOjE3MTg0OTY5OTgsImlhdCI6MTcxODQ5MzM5OCwianRpIjoiODczNDExNWUtOWE3Yy00ZjJhLThjNmEtNjZjOGU3YmYxN2M3IiwidXNlcm5hbWUiOiJnb29nbGVfMTEzMDc4Nzc2ODg4MTYxNDc0MDM3In0.HgkPyC-7hxrkoZ18cPNQcyyUMnEfHel2FHlXKlyycH93uFiui0rCKYMTwBvkEKeSk4CjAAwnUdQ-ubwUIXtXZ6Qdx7T6CliLYuOgi32b8bajyo70C5GFG0gTeTthsJi7phjgkSv8G7SrfnA4_0vchDv3LpIg_5UHUIK98qh3VHs25HO6T-0zKXqC3Fv1Zia_JoxrYroVgwWDtlQ7mMdOVcFmk1eo2ytzOLvsjcJLjNsTAEH4HP1uFjRpClwBmqx9AphlV0pP6a8xKmVbZS0bVhCYSKITGp7BGeOPT8sSJ_Y9adCuwtJ8YTflgEHX04kUSMdjTGQ9Or8rtiwIvejfiA",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/users",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test('Response body contains required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('userId');",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('nativeLanguage');",
									"    pm.expect(jsonData).to.have.property('targetLanguage');",
									"    pm.expect(jsonData).to.have.property('targetLanguageLevel');",
									"    pm.expect(jsonData).to.have.property('targetLanguage2');",
									"    pm.expect(jsonData).to.have.property('targetLanguageLevel2');",
									"    pm.expect(jsonData).to.have.property('targetLanguage3');",
									"    pm.expect(jsonData).to.have.property('targetLanguageLevel3');",
									"    pm.expect(jsonData).to.have.property('dateOfBirth');",
									"    pm.expect(jsonData).to.have.property('timeZone');",
									"    pm.expect(jsonData).to.have.property('userRoles');",
									"    pm.expect(jsonData).to.have.property('ratings');",
									"    pm.expect(jsonData).to.have.property('progresses');",
									"    pm.expect(jsonData).to.have.property('badges');",
									"    pm.expect(jsonData).to.have.property('notifications');",
									"    pm.expect(jsonData).to.have.property('flashcards');",
									"    pm.expect(jsonData).to.have.property('userGeneratedContents');",
									"    pm.expect(jsonData).to.have.property('subscription');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/users/1",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Lessons",
			"item": [
				{
					"name": "Get all lessons",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.request.headers.add({ key: 'Authorization', value: 'Bearer ' + pm.environment.get('jwt') });",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"pm.test('Response body contains required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('title');",
									"        pm.expect(item).to.have.property('contentType');",
									"        pm.expect(item).to.have.property('createdAt');",
									"        pm.expect(item).to.have.property('moduleId');",
									"        pm.expect(item).to.have.property('module');",
									"        pm.expect(item).to.have.property('questions');",
									"        pm.expect(item).to.have.property('ratings');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cognitoIdToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/Lessons",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"Lessons"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one lesson",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.request.headers.add({ key: 'Authorization', value: 'Bearer ' + pm.environment.get('cognitoIdToken') });",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test('Response body contains required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('contentType');",
									"    pm.expect(jsonData).to.have.property('createdAt');",
									"    pm.expect(jsonData).to.have.property('moduleId');",
									"    pm.expect(jsonData).to.have.property('module');",
									"    pm.expect(jsonData).to.have.property('questions');",
									"    pm.expect(jsonData).to.have.property('ratings');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cognitoIdToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/Lessons/1",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"Lessons",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Utils",
			"item": [
				{
					"name": "Health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test('Response body is healthy', function () {",
									"    pm.expect(pm.response.text()).to.include('Healthy');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}api/health",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Languages",
			"item": [
				{
					"name": "Get all languages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test('Response body contains required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(item) {",
									"            pm.expect(item).to.have.property('id');",
									"            pm.expect(item).to.have.property('name');",
									"            pm.expect(item).to.have.property('description');",
									"            pm.expect(item).to.have.property('courses');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/Languages",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"Languages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test('Response body contains required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('courses');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/Languages/1",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"Languages",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Modules",
			"item": [
				{
					"name": "Get all modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test('Response body contains required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        jsonData.forEach(function(item) {",
									"            pm.expect(item).to.have.property('id');",
									"            pm.expect(item).to.have.property('title');",
									"            pm.expect(item).to.have.property('courseId');",
									"            pm.expect(item).to.have.property('course');",
									"            pm.expect(item).to.have.property('lessons');",
									"            pm.expect(item).to.have.property('progresses');",
									"            pm.expect(item).to.have.property('ratings');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/Modules",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"Modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one module",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test('Response body contains required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('courseId');",
									"    pm.expect(jsonData).to.have.property('course');",
									"    pm.expect(jsonData).to.have.property('lessons');",
									"    pm.expect(jsonData).to.have.property('progresses');",
									"    pm.expect(jsonData).to.have.property('ratings');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}api/Modules/1",
							"host": [
								"{{URL}}api"
							],
							"path": [
								"Modules",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}